@using Microsoft.AspNetCore.SignalR.Client
@using OnlineCheckers.Client.Data
@using OnlineCheckers.Shared

@if (!IsGameOver())
{
    <div>
        @(isWhiteTurn? "Whites' turn" : "Blacks' turn") - Time Left @(timeLeft)s
    </div>
    @for (int i = 0; i < Constants.BOARD_SIZE; i++)
    {
        int auxI = i;
        <div class="row">
            @for (int j = 0; j < Constants.BOARD_SIZE; j++)
            {
                int auxJ = j;
                var checker = blackCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
                if (checker == null) checker = whiteCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
            
                bool isPossibleMove = movePossibilities.Contains((auxI, auxJ));

                <div class="cell" @onclick="() => { MoveChecker(auxI, auxJ); }">
                    @if (checker != null)
                    {
                        <div class="checker @checker.Color @(checker == activeChecker ? "active" : "")" @onclick="()=> { CheckerPieceClicked(checker); }">
                            <div class="center">@(checker.Diretion == CheckerDirection.Both ? "♕" : "")</div>
                        </div>
                    }
                    @if (isPossibleMove)
                    {
                        <div class="center target-move">🎯</div>
                    }
                </div>
            }
        </div>
    }

}
else
{
    <GameOverScreen IsPlayerVictorius="@IsPlayerWinner()" />
}

@code {
    [Parameter] public string GameId { get; set; }
    [Parameter] public HubConnection HubConnection { get; set; }
    [Parameter] public bool IsWhitePlayer{ get; set; }


    bool isWhiteTurn = true;
    private static System.Timers.Timer turnTimer;
    int timeLeft = 30;
    int turnsTimedout = 0;
    List<Checker> blackCheckers = new List<Checker>();
    List<Checker> whiteCheckers = new List<Checker>();
    Checker activeChecker = null;

    List<(int row, int column)> movePossibilities = new List<(int, int)>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GeneratePieces();

        HubConnection.On<int, int, int, int>(SharedConstants.MULTIPLAYER_HUB_CHECKER_MOVED, OpponentMove);
        HubConnection.On(SharedConstants.MULTIPLAYER_HUB_CHECKER_PLAYER_PASSED_TURN, TurnPassed);
        HubConnection.On<string>(SharedConstants.MULTIPLAYER_HUB_PLAYER_DISCONNECTED, EndGame);
        HubConnection.On(SharedConstants.MULTIPLAYER_HUB_CHECKERS_PLAYER_CONCEDED, EnemyConceded);

        StartTurnTimer();
    }

    protected void OpponentMove(int prevCol, int prevRow, int currCol, int currRow)
    {
        var checker = blackCheckers.FirstOrDefault(n => n.Column == prevCol && n.Row == prevRow);
        if(checker == null) checker = whiteCheckers.FirstOrDefault(n => n.Column == prevCol && n.Row == prevRow);

        SetActiveChecker(checker);
        GeneratePossibleMoves();
        MoveChecker(currRow, currCol);
    }

    protected void EnemyConceded()
    {
        EndGame(IsWhitePlayer ? SharedConstants.BLACK_CHECKER_COLOR_NAME : SharedConstants.WHITE_CHECKER_COLOR_NAME);
    }

    protected void EndGame(string checkerColor)
    {
        if(checkerColor == SharedConstants.WHITE_CHECKER_COLOR_NAME)
        {
            whiteCheckers.Clear();
        }
        else
        {
            blackCheckers.Clear();
        }
        StateHasChanged();
    }

    protected void CheckerPieceClicked(Checker checker)
    {
        if (isWhiteTurn != IsWhitePlayer) 
            return;
        if (isWhiteTurn && checker.Color == SharedConstants.BLACK_CHECKER_COLOR_NAME)
            return;
        if (!isWhiteTurn && checker.Color == SharedConstants.WHITE_CHECKER_COLOR_NAME)
            return;

        SetActiveChecker(checker); 
        GeneratePossibleMoves();    
    }

    protected void SetActiveChecker(Checker checker)
    {
        activeChecker = checker;
    }

    protected void GeneratePossibleMoves()
    {
        ClearPossibilities();

        if(activeChecker != null)
        {
            List<int> rowPossibilities = new List<int>();

            if(activeChecker.Diretion == CheckerDirection.Down || activeChecker.Diretion == CheckerDirection.Both)
            {
                rowPossibilities.Add(activeChecker.Row + 1);
            }

            if(activeChecker.Diretion == CheckerDirection.Up || activeChecker.Diretion == CheckerDirection.Both)
            {
                rowPossibilities.Add(activeChecker.Row - 1);
            }

            foreach (int row in rowPossibilities)
            {
                EvaluateMove(row, activeChecker.Column - 1);
                EvaluateMove(row, activeChecker.Column + 1);
            }
        }
    }

    protected void EvaluateMove(int row, int column, bool isFirstTime = true)
    {
        var blackChecker = blackCheckers.FirstOrDefault(n => n.Row == row && n.Column == column);
        var whiteChecker = whiteCheckers.FirstOrDefault(n => n.Row == row && n.Column == column);

        if(whiteChecker ==  null && blackChecker == null)
        {
            movePossibilities.Add((row, column));
        }
        else if(isFirstTime)
        {
            //Evaluating jump over possibility
            if((isWhiteTurn && blackChecker != null) ||
            (!isWhiteTurn && whiteChecker != null))
            {
                int columnGap = column - activeChecker.Column;

                int rowGap = row - activeChecker.Row;

                EvaluateMove(row + rowGap, column + columnGap, false);
            }
        }

    }

    protected void ClearPossibilities()
    {    
        movePossibilities.Clear();
    }

    void MoveChecker(int row, int column)
    {
        bool isPossibleMove = movePossibilities.Contains((row, column));

        if (!isPossibleMove) return;

        CheckForCheckerTaken(row, column);

        HubConnection.SendAsync(SharedConstants.MULTIPLAYER_HUB_METHOD_MOVE_CHECKER, GameId, activeChecker.Column, activeChecker.Row, column, row);
        activeChecker.Column = column;
        activeChecker.Row = row;

        if((activeChecker.Row == 0 && activeChecker.Color == SharedConstants.WHITE_CHECKER_COLOR_NAME) || 
        (activeChecker.Row == (Constants.BOARD_SIZE - 1) && activeChecker.Color == SharedConstants.BLACK_CHECKER_COLOR_NAME))
        {
            activeChecker.Diretion = CheckerDirection.Both;
        }

        TurnChangePhase();
    }

    private void TurnChangePhase()
    {
        activeChecker = null;
        ChangeTurn();
        GeneratePossibleMoves();
        StateHasChanged();
    }

    protected void CheckForCheckerTaken(int row, int column)
    {
        if(Math.Abs(activeChecker.Column - column) == 2)
        {
            int jumpedColumn = (activeChecker.Column + column) / 2;
            int jumpedRow = (activeChecker.Row + row) / 2;

            Checker? takenChecker = null;
            if (isWhiteTurn)
            {
                takenChecker = blackCheckers.FirstOrDefault(n => n.Column == jumpedColumn && n.Row == jumpedRow);
                if (takenChecker != null) blackCheckers.Remove(takenChecker);
            }
            else
            {
                takenChecker = whiteCheckers.FirstOrDefault(n => n.Column == jumpedColumn && n.Row == jumpedRow);
                if (takenChecker != null) whiteCheckers.Remove(takenChecker);
            }
        }
    }

    protected bool IsGameOver()
    {
        return blackCheckers.Count <= 0 || whiteCheckers.Count <= 0;
    }

    protected bool IsPlayerWinner()
    {
        return (IsWhitePlayer && blackCheckers.Count <= 0) || (!IsWhitePlayer && whiteCheckers.Count <= 0);
    }

    protected void TurnPassed()
    {
        TurnChangePhase();
    }

    protected void ChangeTurn()
    {
        isWhiteTurn = !isWhiteTurn;
        timeLeft = 30;
        StartTurnTimer();
    }

    public void StartTurnTimer()
    {
        if (turnTimer != null) turnTimer.Enabled = false;

        turnTimer = new System.Timers.Timer(1000);
        turnTimer.Elapsed += CountdownTimer;
        turnTimer.Enabled = true;
    }

    public void CountdownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        timeLeft -= 1;
        if(timeLeft <= 0)
        {
            if((IsWhitePlayer && isWhiteTurn) || (!IsWhitePlayer && !isWhiteTurn))
            {
                turnsTimedout += 1;
                if(turnsTimedout >= Constants.MAX_TIMED_OUT_TURNS)
                {
                    Concede();
                }
                else
                {
                    PassTurn();
                }
            }
        }
        StateHasChanged();
    }

    public void Concede()
    {
        HubConnection.SendAsync(SharedConstants.MULTIPLAYER_HUB_METHOD_PLAYER_CONCEDED, GameId);
        EndGame(IsWhitePlayer ? SharedConstants.WHITE_CHECKER_COLOR_NAME : SharedConstants.BLACK_CHECKER_COLOR_NAME);
    }

    public void PassTurn()
    {
        HubConnection.SendAsync(SharedConstants.MULTIPLAYER_HUB_METHOD_TURN_PASSED, GameId);
        TurnChangePhase();
    }

    protected void GeneratePieces()
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = (i + 1) % 2; j < Constants.BOARD_SIZE; j+=2)
            {
                blackCheckers.Add(new Checker()
                    {
                        Column = j,
                        Row = i,
                        Diretion = CheckerDirection.Down,
                        Color = SharedConstants.BLACK_CHECKER_COLOR_NAME
                    });
            }
        }
        
        for (int i = 5; i < 8; i++)
        {
            for (int j = (i + 1) % 2; j < Constants.BOARD_SIZE; j+=2)
            {
                whiteCheckers.Add(new Checker()
                    {
                        Column = j,
                        Row = i,
                        Diretion = CheckerDirection.Up,
                        Color = SharedConstants.WHITE_CHECKER_COLOR_NAME
                    });
            }
        }
        
    }
}
