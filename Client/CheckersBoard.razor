@using OnlineCheckers.Client.Data
@for (int i = 0; i < Constants.BOARD_SIZE; i++)
{
    int auxI = i;
    <div class="row">
        @for (int j = 0; j < Constants.BOARD_SIZE; j++)
        {
            int auxJ = j;
            var checker = blackCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
            if (checker == null) checker = whiteCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
            
            bool isPossibleMove = movePossibilities.Contains((auxI, auxJ));

            <div class="cell @(isPossibleMove ? "active" : "")" @onclick="() => { MoveChecker(auxI, auxJ); }">
                @if (checker != null)
                {
                    <div class="checker @checker.Color @(checker == activeChecker ? "active" : "")" @onclick="()=> { CheckerPieceClicked(checker); }">
                        <div>@(checker.Diretion == CheckerDirection.Both ? "♕" : "")</div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    bool isWhiteTurn = true;
    List<Checker> blackCheckers = new List<Checker>();
    List<Checker> whiteCheckers = new List<Checker>();
    Checker activeChecker = null;

    List<(int row, int column)> movePossibilities = new List<(int, int)>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GeneratePieces();

    }

    protected void CheckerPieceClicked(Checker checker)
    {
        SetActiveChecker(checker); 
        GeneratePossibleMoves();    
    }

    protected void SetActiveChecker(Checker checker)
    {
        activeChecker = checker;
    }

    protected void GeneratePossibleMoves()
    {
        ClearPossibilities();

        if(activeChecker != null)
        {
            List<int> rowPossibilities = new List<int>();

            if(activeChecker.Diretion == CheckerDirection.Down || activeChecker.Diretion == CheckerDirection.Both)
            {
                rowPossibilities.Add(activeChecker.Row + 1);
            }

            if(activeChecker.Diretion == CheckerDirection.Up || activeChecker.Diretion == CheckerDirection.Both)
            {
                rowPossibilities.Add(activeChecker.Row - 1);
            }

            foreach (int row in rowPossibilities)
            {
                if(IsMoveLegal(row, activeChecker.Column - 1)) movePossibilities.Add((row, activeChecker.Column - 1));
                if(IsMoveLegal(row, activeChecker.Column + 1)) movePossibilities.Add((row, activeChecker.Column + 1));
            }
        }
    }

    protected bool IsMoveLegal(int row, int column)
    {
        var blackChecker = blackCheckers.FirstOrDefault(n => n.Row == row && n.Column == column);

        var whiteChecker = blackCheckers.FirstOrDefault(n => n.Row == row && n.Column == column);

        return whiteChecker == null && blackChecker == null;
        
    }

    protected void ClearPossibilities()
    {    
        movePossibilities.Clear();
    }

    void MoveChecker(int row, int column)
    {
        bool isPossibleMove = movePossibilities.Contains((row, column));
        if (!isPossibleMove) return;

        activeChecker.Column = column;
        activeChecker.Row = row;
        if((activeChecker.Row == 0 && activeChecker.Color == Constants.WHITE_CHECKER_COLOR_NAME) || 
        (activeChecker.Row == (Constants.BOARD_SIZE - 1) && activeChecker.Color == Constants.BLACK_CHECKER_COLOR_NAME))
        {
            activeChecker.Diretion = CheckerDirection.Both;
        }
        activeChecker = null;

        ClearPossibilities();
    }

    protected void GeneratePieces()
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = (i + 1) % 2; j < Constants.BOARD_SIZE; j+=2)
            {
                blackCheckers.Add(new Checker()
                    {
                        Column = j,
                        Row = i,
                        Diretion = CheckerDirection.Down,
                        Color = Constants.BLACK_CHECKER_COLOR_NAME
                    });
            }
        }
        
        for (int i = 5; i < 8; i++)
        {
            for (int j = (i + 1) % 2; j < Constants.BOARD_SIZE; j+=2)
            {
                blackCheckers.Add(new Checker()
                    {
                        Column = j,
                        Row = i,
                        Diretion = CheckerDirection.Up,
                        Color = Constants.WHITE_CHECKER_COLOR_NAME
                    });
            }
        }
        
    }
}
